// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BlogPost {
  id          Int        @id @default(autoincrement())
  url         String     @unique
  author      String
  title       String
  content     String
  summary     String
  pictureUrl  String?
  twitterauthor String
  createdAt   DateTime   
  updatedAt   DateTime   @updatedAt
  tweeted     Boolean    @default(false)
  bookmarks   Bookmark[] @relation("bookmarks")
  likes       Like[]     @relation("likes")
}

model MSBlogPost {
  id          Int        @id @default(autoincrement())
  url         String     @unique
  pictureUrl  String
  title       String
  date        String
  author      String     @default("Microsoft")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  bookmarks   Bookmark[] @relation("MSBlogPostBookmarks")
  likes       Like[]     @relation("MSBlogPostLikes")
}

model WindowsBlogPost {
  id          Int        @id @default(autoincrement())
  url         String     @unique
  pictureUrl  String
  title       String
  date        String
  author      String     @default("Microsoft")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  bookmarks   Bookmark[] @relation("WindowsBlogPostBookmarks")
  likes       Like[]     @relation("WindowsBlogPostLikes")
}

model IntuneMSBlogPost {
  id          Int        @id @default(autoincrement())
  url         String     @unique
  pictureUrl  String
  title       String
  date        String
  author      String     @default("Microsoft")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  bookmarks   Bookmark[] @relation("IntuneMSBlogPostBookmarks")
  likes       Like[]     @relation("IntuneMSBlogPostLikes")
}

model Bookmark {
  id          Int        @id @default(autoincrement())
  userId      String
  blogId      Int?
  msBlogId    Int?       // This is nullable because a bookmark can be related to either a BlogPost or a MSBlogPost
  windowsBlogId    Int?       // This is nullable because a bookmark can be related to either a BlogPost or a MSBlogPost
  intunemsBlogId    Int?       // This is nullable because a bookmark can be related to either a BlogPost or a MSBlogPost
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?   @updatedAt
  blogPost    BlogPost?  @relation("bookmarks", fields: [blogId], references: [id])
  msBlogPost  MSBlogPost? @relation("MSBlogPostBookmarks", fields: [msBlogId], references: [id])
  windowsBlogPost  WindowsBlogPost? @relation("WindowsBlogPostBookmarks", fields: [windowsBlogId], references: [id])
  intunemsBlogPost  IntuneMSBlogPost? @relation("IntuneMSBlogPostBookmarks", fields: [intunemsBlogId], references: [id])
}

model Like {
  id          Int        @id @default(autoincrement())
  userId      String
  blogId      Int?
  msBlogId    Int?       // This is nullable because a like can be related to either a BlogPost or a MSBlogPost
  windowsBlogId    Int?       // This is nullable because a bookmark can be related to either a BlogPost or a MSBlogPost
  intunemsBlogId    Int?       // This is nullable because a bookmark can be related to either a BlogPost or a MSBlogPost
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?   @updatedAt
  blogPost    BlogPost?  @relation("likes", fields: [blogId], references: [id])
  msBlogPost  MSBlogPost? @relation("MSBlogPostLikes", fields: [msBlogId], references: [id])
  windowsBlogPost  WindowsBlogPost? @relation("WindowsBlogPostLikes", fields: [windowsBlogId], references: [id])
  intunemsBlogPost  IntuneMSBlogPost? @relation("IntuneMSBlogPostLikes", fields: [intunemsBlogId], references: [id])
}




model WhatsNew {
  id         Int          @id @default(autoincrement())
  url        String       @unique
  author     String
  title      String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  tweeted    Boolean      @default(false)
}

model YoutubeVideos {
  id             Int            @id @default(autoincrement())
  url            String         @unique
  author         String
  title          String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  tweeted        Boolean        @default(false)
  videoLikes     VideoLike[]    @relation("videolikes")
  videoBookmarks VideoBookmark[] @relation("videobookmarks")
}



model VideoLike {
  id            Int           @id @default(autoincrement())
  userId        String
  videoId       Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  youtubeVideo  YoutubeVideos @relation("videolikes", fields: [videoId], references: [id])
}

model VideoBookmark {
  id           Int           @id @default(autoincrement())
  userId       String
  videoId      Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  youtubeVideo YoutubeVideos @relation("videobookmarks", fields: [videoId], references: [id])
}



model IntuneDocs {
  id        Int      @id @default(autoincrement())
  url       String   @unique
  author    String
  title     String
  summary   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tweeted   Boolean  @default(false)
}